/kaggle/input/zoo-animal-classification/zoo.csv

/kaggle/input/zoo-animal-classification/class.csv

<class 'pandas.core.frame.DataFrame'>

Int64Index: 101 entries, 0 to 100

Data columns (total 19 columns):

 #   Column        Non-Null Count  Dtype 

---  ------        --------------  ----- 

 0   animal_name   101 non-null    object

 1   hair          101 non-null    int64 

 2   feathers      101 non-null    int64 

 3   eggs          101 non-null    int64 

 4   milk          101 non-null    int64 

 5   airborne      101 non-null    int64 

 6   aquatic       101 non-null    int64 

 7   predator      101 non-null    int64 

 8   toothed       101 non-null    int64 

 9   backbone      101 non-null    int64 

 10  breathes      101 non-null    int64 

 11  venomous      101 non-null    int64 

 12  fins          101 non-null    int64 

 13  legs          101 non-null    int64 

 14  tail          101 non-null    int64 

 15  domestic      101 non-null    int64 

 16  catsize       101 non-null    int64 

 17  Class_Number  101 non-null    int64 

 18  Class_Type    101 non-null    object

dtypes: int64(17), object(2)

memory usage: 15.8+ KB

[[10  0  0  0  0  0  0]

 [ 0  5  0  0  0  0  0]

 [ 0  0  0  1  0  0  0]

 [ 0  0  0  5  0  0  0]

 [ 0  0  0  0  1  0  0]

 [ 0  0  0  0  0  2  0]

 [ 0  0  0  0  0  0  2]]

              precision    recall  f1-score   support



           1       1.00      1.00      1.00        10

           2       1.00      1.00      1.00         5

           3       0.00      0.00      0.00         1

           4       0.83      1.00      0.91         5

           5       1.00      1.00      1.00         1

           6       1.00      1.00      1.00         2

           7       1.00      1.00      1.00         2



    accuracy                           0.96        26

   macro avg       0.83      0.86      0.84        26

weighted avg       0.93      0.96      0.94        26



Mean Scores:

[0.9178571428571429, 0.9178571428571429, 0.8232142857142858, 0.7714285714285714, 0.7589285714285714, 0.7589285714285714, 0.7464285714285713, 0.7464285714285713, 0.7589285714285714, 0.6946428571428571, 0.6535714285714286, 0.5607142857142857, 0.5607142857142857, 0.5732142857142857, 0.5732142857142857, 0.5732142857142857, 0.5607142857142857, 0.5214285714285714, 0.5107142857142857, 0.5232142857142856, 0.48392857142857143, 0.4428571428571429, 0.41428571428571426, 0.41428571428571426, 0.41428571428571426]

Error Rate:

[0.0, 0.0, 0.038461538461538464, 0.07692307692307693, 0.11538461538461539, 0.19230769230769232, 0.19230769230769232, 0.19230769230769232, 0.19230769230769232, 0.15384615384615385, 0.15384615384615385, 0.23076923076923078, 0.46153846153846156, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.46153846153846156, 0.46153846153846156, 0.5, 0.5, 0.6153846153846154]

[[ 1  0  0  0  0  0  0]

 [ 0  5  0  0  0  0  0]

 [ 0  0  2  0  0  0  0]

 [ 0  0  0  5  0  0  0]

 [ 0  0  0  0  2  0  0]

 [ 0  0  0  0  0 10  0]

 [ 0  0  0  0  0  0  1]]

              precision    recall  f1-score   support



   Amphibian       1.00      1.00      1.00         1

        Bird       1.00      1.00      1.00         5

         Bug       1.00      1.00      1.00         2

        Fish       1.00      1.00      1.00         5

Invertebrate       1.00      1.00      1.00         2

      Mammal       1.00      1.00      1.00        10

     Reptile       1.00      1.00      1.00         1



    accuracy                           1.00        26

   macro avg       1.00      1.00      1.00        26

weighted avg       1.00      1.00      1.00        26



Mean Scores:

[0.9178571428571429, 0.9178571428571429, 0.8232142857142858, 0.7714285714285714, 0.7589285714285714, 0.7589285714285714, 0.7464285714285713, 0.7464285714285713, 0.7589285714285714, 0.6946428571428571, 0.6535714285714286, 0.5607142857142857, 0.5607142857142857, 0.5732142857142857, 0.5732142857142857, 0.5732142857142857, 0.5607142857142857, 0.5214285714285714, 0.5107142857142857, 0.5232142857142856, 0.48392857142857143, 0.4428571428571429, 0.41428571428571426, 0.41428571428571426, 0.41428571428571426]

Error Rate:

[0.0, 0.0, 0.038461538461538464, 0.07692307692307693, 0.11538461538461539, 0.19230769230769232, 0.19230769230769232, 0.19230769230769232, 0.19230769230769232, 0.15384615384615385, 0.15384615384615385, 0.23076923076923078, 0.46153846153846156, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.4230769230769231, 0.46153846153846156, 0.46153846153846156, 0.5, 0.5, 0.6153846153846154]

[NbConvertApp] Converting notebook __notebook__.ipynb to notebook

[NbConvertApp] ERROR | Notebook JSON is invalid: Additional properties are not allowed ('execution_count' was unexpected)



Failed validating 'additionalProperties' in markdown_cell:



On instance['cells'][0]:

{'cell_type': 'markdown',

 'execution_count': None,

 'metadata': {'papermill': {'duration': 0.022398,

                            'end_time': '2020-08-19T22:29:14.592701',

                            'exception': False,

                            'start_time': '2020-08-19T22:29:14.570303',

                            'status': 'completed'},

              'tags': []},

 'source': '# K Nearest Neighbours (KNN)\n'

           'The KNN algorithm works by storing ...'}

[NbConvertApp] Writing 568413 bytes to __notebook__.ipynb

[NbConvertApp] Converting notebook __notebook__.ipynb to html

[NbConvertApp] ERROR | Notebook JSON is invalid: Additional properties are not allowed ('execution_count' was unexpected)



Failed validating 'additionalProperties' in markdown_cell:



On instance['cells'][0]:

{'cell_type': 'markdown',

 'execution_count': None,

 'metadata': {'papermill': {'duration': 0.022398,

                            'end_time': '2020-08-19T22:29:14.592701',

                            'exception': False,

                            'start_time': '2020-08-19T22:29:14.570303',

                            'status': 'completed'},

              'tags': []},

 'source': '# K Nearest Neighbours (KNN)\n'

           'The KNN algorithm works by storing ...'}

[NbConvertApp] Support files will be in __results___files/

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Making directory __results___files

[NbConvertApp] Writing 371327 bytes to __results__.html
